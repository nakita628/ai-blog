import{_ as i,c as a,o as n,a7 as l}from"./chunks/framework.zg2pR_DR.js";const g=JSON.parse('{"title":"TypeScriptにおけるnullとundefinedの違いと使い分け完全ガイド","description":"TypeScriptでよく混同されがちなnullとundefinedの違いを徹底解説。型定義、挙動、ベストプラクティス、よくある落とし穴まで、実践的な例とともにわかりやすく紹介します。","frontmatter":{"date":"2025-07-24T00:00:00.000Z","title":"TypeScriptにおけるnullとundefinedの違いと使い分け完全ガイド","description":"TypeScriptでよく混同されがちなnullとundefinedの違いを徹底解説。型定義、挙動、ベストプラクティス、よくある落とし穴まで、実践的な例とともにわかりやすく紹介します。","tags":["typescript",null,"undefined","type-safety","javascript","best-practices","web-development"],"prev":{"text":"ReactとSWRで実現する最新データフェッチ戦略：ベストプラクティス徹底解説","link":"/posts/2025/07/23"},"next":{"text":"Redisの基本とベストプラクティス：高速キャッシュ・セッション管理の実践例","link":"/posts/2025/07/25"}},"headers":[],"relativePath":"posts/2025/07/24.md","filePath":"posts/2025/07/24.md"}'),e={name:"posts/2025/07/24.md"};function h(t,s,k,p,d,r){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="typescriptにおけるnullとundefinedの違いと使い分け完全ガイド" tabindex="-1">TypeScriptにおけるnullとundefinedの違いと使い分け完全ガイド <a class="header-anchor" href="#typescriptにおけるnullとundefinedの違いと使い分け完全ガイド" aria-label="Permalink to &quot;TypeScriptにおけるnullとundefinedの違いと使い分け完全ガイド&quot;">​</a></h1><p>TypeScriptで開発をしていると、nullとundefinedの違いに戸惑うことはありませんか？本記事では、両者の本質的な違いと型定義、実際の挙動、ベストプラクティスについて、実例を交えてわかりやすく解説します。</p><h2 id="nullとundefinedの基本的な違い" tabindex="-1">nullとundefinedの基本的な違い <a class="header-anchor" href="#nullとundefinedの基本的な違い" aria-label="Permalink to &quot;nullとundefinedの基本的な違い&quot;">​</a></h2><ul><li><strong>undefined</strong>：変数が宣言されたが値が代入されていない場合や、何も返さない関数の戻り値として自動的に付与される値。</li><li><strong>null</strong>：明示的に「値が存在しない」ことを示すために開発者が代入する値。</li></ul><h2 id="型定義と挙動の違い" tabindex="-1">型定義と挙動の違い <a class="header-anchor" href="#型定義と挙動の違い" aria-label="Permalink to &quot;型定義と挙動の違い&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined（初期値）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null（明示的に代入しないとエラー）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エラー</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エラー</span></span></code></pre></div><ul><li><code>undefined</code>は型定義で許可しない限り、<code>null</code>は代入できません。</li><li><code>strictNullChecks</code>が有効な場合、<code>null</code>と<code>undefined</code>は明確に区別されます。</li></ul><h2 id="よくある落とし穴" tabindex="-1">よくある落とし穴 <a class="header-anchor" href="#よくある落とし穴" aria-label="Permalink to &quot;よくある落とし穴&quot;">​</a></h2><ul><li>オプショナルプロパティ（<code>?</code>）は<code>undefined</code>のみ許容し、<code>null</code>は許容しません。</li><li>JSON.parseでパースした値は<code>null</code>になることが多いですが、未定義プロパティは<code>undefined</code>です。</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エラー（型にnullを含める必要あり）</span></span></code></pre></div><h2 id="ベストプラクティス" tabindex="-1">ベストプラクティス <a class="header-anchor" href="#ベストプラクティス" aria-label="Permalink to &quot;ベストプラクティス&quot;">​</a></h2><ul><li><strong>未設定・未初期化</strong>は<code>undefined</code>、**意図的な「空」や「無効」**は<code>null</code>を使う</li><li>APIレスポンスやDB値の「欠損」は<code>null</code>で表現することが多い</li><li>型定義では<code>string | null | undefined</code>のように両方を許容する場合もある</li></ul><h2 id="nullとundefinedの使い分け例" tabindex="-1">nullとundefinedの使い分け例 <a class="header-anchor" href="#nullとundefinedの使い分け例" aria-label="Permalink to &quot;nullとundefinedの使い分け例&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUserName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user?.name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUserEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.email;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>オプショナル引数やプロパティには<code>undefined</code>が使われる</li><li>明示的な「存在しない」値には<code>null</code>を使う</li></ul><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><ul><li><code>undefined</code>は「未定義」や「未初期化」を表し、TypeScriptの型推論やオプショナルで多用されます。</li><li><code>null</code>は「意図的に空」を表し、APIやDBの値、明示的な欠損値として使われます。</li><li>どちらを使うかは文脈と設計方針によりますが、型定義を明確にし、混乱を避けることが重要です。</li></ul>`,17)])])}const c=i(e,[["render",h]]);export{g as __pageData,c as default};
