import{_ as i,c as a,o as n,a7 as l}from"./chunks/framework.zg2pR_DR.js";const g=JSON.parse('{"title":"TypeScriptで作る2FA認証システム：JWTと組み合わせて実現する多要素認証","description":"2要素認証（2FA）をJWTと組み合わせて実装する方法を解説。TOTPを使用した時間ベースのワンタイムパスワード生成から検証まで、セキュアな多要素認証の実装手順を紹介します。","frontmatter":{"date":"2025-07-12T00:00:00.000Z","title":"TypeScriptで作る2FA認証システム：JWTと組み合わせて実現する多要素認証","description":"2要素認証（2FA）をJWTと組み合わせて実装する方法を解説。TOTPを使用した時間ベースのワンタイムパスワード生成から検証まで、セキュアな多要素認証の実装手順を紹介します。","tags":["typescript","authentication","jwt","two-factor-auth","security","totp"],"prev":{"text":"TypeScriptでJWT認証を実装：安全なAPIアクセス制御の実践ガイド","link":"/posts/2025/07/11"},"next":{"text":"TypeScriptで学ぶJWTとCookieの安全な併用パターン：セキュアな認証の実現","link":"/posts/2025/07/13"}},"headers":[],"relativePath":"posts/2025/07/12.md","filePath":"posts/2025/07/12.md"}'),h={name:"posts/2025/07/12.md"};function t(p,s,k,e,r,E){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="typescriptで作る2fa認証システム-jwtと組み合わせて実現する多要素認証" tabindex="-1">TypeScriptで作る2FA認証システム：JWTと組み合わせて実現する多要素認証 <a class="header-anchor" href="#typescriptで作る2fa認証システム-jwtと組み合わせて実現する多要素認証" aria-label="Permalink to &quot;TypeScriptで作る2FA認証システム：JWTと組み合わせて実現する多要素認証&quot;">​</a></h1><p>多要素認証（2FA）は今や現代のWebアプリケーションにおいて必須のセキュリティ機能となっています。本記事では、TypeScriptを使用してJWTと2FAを組み合わせた認証システムを実装する方法を、わかりやすく解説します。</p><h2 id="_2fa実装の全体像" tabindex="-1">2FA実装の全体像 <a class="header-anchor" href="#_2fa実装の全体像" aria-label="Permalink to &quot;2FA実装の全体像&quot;">​</a></h2><p>まず、今回実装する2FA認証システムの全体像を確認しましょう。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TwoFactorAuth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  secret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  isEnabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  backupCodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // JWTトークンの生成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateTokens</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">is2faVerified</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tokens</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> payload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sub: user.id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      is2faVerified,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      accessToken: jwt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload, process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JWT_SECRET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { expiresIn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;15m&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      refreshToken: jwt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload, process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REFRESH_SECRET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { expiresIn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;7d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2FAの有効化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> enable2FA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">secret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">qrCode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> secret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authenticator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateSecret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> qrCode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authenticator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keyuri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userId, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyApp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, secret);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.twoFactorAuth.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userId,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        secret,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isEnabled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        backupCodes: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateBackupCodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { secret, qrCode };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2FAコードの検証</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verify2FACode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> twoFactorAuth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.twoFactorAuth.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findUnique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      where: { userId },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authenticator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      token: code,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      secret: twoFactorAuth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.secret,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="実装の詳細手順" tabindex="-1">実装の詳細手順 <a class="header-anchor" href="#実装の詳細手順" aria-label="Permalink to &quot;実装の詳細手順&quot;">​</a></h2><h3 id="_1-必要なパッケージのインストール" tabindex="-1">1. 必要なパッケージのインストール <a class="header-anchor" href="#_1-必要なパッケージのインストール" aria-label="Permalink to &quot;1. 必要なパッケージのインストール&quot;">​</a></h3><p>2FA実装に必要な主要パッケージは以下の通りです：</p><ul><li><code>@types/jsonwebtoken</code>: JWT関連の型定義</li><li><code>otplib</code>: TOTPベースの2FAコード生成/検証</li><li><code>qrcode</code>: QRコード生成用</li><li><code>@prisma/client</code>: データベースORM（今回はPrismaを使用）</li></ul><h3 id="_2-2fa有効化フロー" tabindex="-1">2. 2FA有効化フロー <a class="header-anchor" href="#_2-2fa有効化フロー" aria-label="Permalink to &quot;2. 2FA有効化フロー&quot;">​</a></h3><p>2FA有効化の流れは以下のステップで行います：</p><ol><li>シークレットキーの生成</li><li>QRコードの生成（Google Authenticatorなどで読み取り可能）</li><li>ユーザーによる確認コードの入力</li><li>コードの検証と2FAの有効化</li></ol><h3 id="_3-ログインフローの変更" tabindex="-1">3. ログインフローの変更 <a class="header-anchor" href="#_3-ログインフローの変更" aria-label="Permalink to &quot;3. ログインフローの変更&quot;">​</a></h3><p>2FAを導入することで、ログインフローは以下のように2段階になります：</p><ol><li><p>通常のログイン（メール/パスワード）</p><ul><li>成功時に <code>is2faVerified: false</code> のJWTを発行</li><li>このトークンでは限定的な操作のみ可能</li></ul></li><li><p>2FAコードの確認</p><ul><li>成功時に <code>is2faVerified: true</code> の完全なJWTを発行</li><li>すべての操作が可能に</li></ul></li></ol><h3 id="_4-セキュリティ考慮事項" tabindex="-1">4. セキュリティ考慮事項 <a class="header-anchor" href="#_4-セキュリティ考慮事項" aria-label="Permalink to &quot;4. セキュリティ考慮事項&quot;">​</a></h3><p>2FA実装時の重要なセキュリティポイントをまとめます：</p><ul><li><p>バックアップコードの提供</p><ul><li>2FAデバイスを紛失した場合の対策</li><li>使い捨ての回復コードを生成</li></ul></li><li><p>レート制限の実装</p><ul><li>不正な試行を防ぐため</li><li>特定期間内の試行回数を制限</li></ul></li><li><p>トークンの有効期限設定</p><ul><li>短めの有効期限を設定</li><li>リフレッシュトークンの管理</li></ul></li></ul><h2 id="実装のベストプラクティス" tabindex="-1">実装のベストプラクティス <a class="header-anchor" href="#実装のベストプラクティス" aria-label="Permalink to &quot;実装のベストプラクティス&quot;">​</a></h2><ol><li><p><strong>エラーハンドリング</strong></p><ul><li>明確なエラーメッセージ</li><li>セキュリティを考慮した情報開示</li></ul></li><li><p><strong>ユーザビリティ</strong></p><ul><li>わかりやすいセットアップ手順</li><li>直感的なエラーメッセージ</li><li>スムーズな回復フロー</li></ul></li><li><p><strong>保守性</strong></p><ul><li>モジュール化された設計</li><li>テストの充実</li><li>ログ記録の適切な実装</li></ul></li></ol><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><p>2FAの実装は一見複雑に見えますが、適切なライブラリと設計方針があれば、セキュアな多要素認証システムを構築することができます。本記事で紹介した実装方法は、実際のプロダクションで使用できる堅牢な基盤となります。</p><p>セキュリティと使いやすさのバランスを取りながら、ユーザーを保護する2FA機能を実装してみてはいかがでしょうか？より詳細な実装例やセキュリティのベストプラクティスについては、次回の記事で解説する予定です。</p>`,23)])])}const y=i(h,[["render",t]]);export{g as __pageData,y as default};
